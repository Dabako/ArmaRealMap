@model ArmaRealMapWebSite.Entities.Assets.ObjectLibrary
@using ArmaRealMap.Core.ObjectLibraries

@{
    ViewData["Title"] = "Details";
}

<h1>
    @Html.DisplayFor(modelItem => Model.ObjectCategory)
    @if (!string.IsNullOrEmpty(Model.Name))
    {
        @:-
        @Html.DisplayFor(modelItem => Model.Name)
    }
</h1>
<p>
    <a class="btn btn-sm btn-outline-secondary" asp-action="Edit" asp-route-id="@Model.ObjectLibraryID">Modifier</a>
</p>

<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TerrainRegion)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TerrainRegion)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Density)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Density)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Probability)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Probability)
        </dd>
    </dl>
</div>


<form asp-action="EqualProbability" asp-route-id="@Model.ObjectLibraryID" class="mb-2">
    <a class="btn btn-primary" asp-controller="ObjectLibraryAssets" asp-action="Create" asp-route-objectLibraryID="@Model.ObjectLibraryID">Ajouter un objet</a>
    @if (Model.ObjectCategory.HasProbability())
    {
        <button class="btn btn-outline-secondary">Rendre tous les modèles équiprobable</button>
    }
</form>

@if (Model.ObjectCategory.HasProbability())
{
    var sumProbability = Model.Assets.Sum(m => m.Probability);
    if (sumProbability != 1)
    {
        <div class="alert alert-warning" role="alert">
            La somme des probabilités est <strong>@sumProbability</strong>, elle devrait être de 1.
        </div>
    }
}
@if (Model.ObjectCategory.HasDensity())
{
    @if (Model.Density == null)
    {
        Model.Density = 0.01;
    }

    var itemSurface = Model.Assets.Sum(o => (o.Probability ?? 0) * Math.Pow(o.PlacementRadius ?? 1, 2) * Math.PI);
    var maxDensity = 1 / itemSurface * 0.8d;

    if (Model.Density > maxDensity)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Densité invalide</h4>
            <p>La densité théorique maximale est de <strong>@Math.Round(maxDensity, 6) objets/m²</strong>, la densité est de <strong>@Model.Density objets/m²</strong>.</p>
            <p>Il faut soit modifier la densité, soit modifier le rayon d'enprise des objets.</p>
            <p>Le programme de placement ne pourra pas placer autant d'éléments.</p>
        </div>
    }
    else
    {
        <div class="alert alert-secondary" role="alert">
            <p>La densité théorique maximale est de <strong>@Math.Round(maxDensity, 6) objets/m²</strong>.</p>
            <p>Le remplissage apparent sera de <strong>@Math.Round(Model.Density.Value / maxDensity * 80, 2) %</strong> (le maximum possible est 80%).</p>
        </div>
    }
}

<table class="table">
    <thead>
        <tr>
            <th>
                Aperçu
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Assets[0].Asset.Name)
            </th>
            @if (Model.ObjectCategory.HasProbability())
            {
                <th>
                    @Html.DisplayNameFor(model => model.Assets[0].Probability)
                </th>
            }
            @if (Model.ObjectCategory.HasPlacementRadius())
            {
                <th>
                    Placement
                </th>
            }
            @if (Model.ObjectCategory.IsBestFit())
            {
                <th>
                    Taille
                </th>
            }
            @if (Model.ObjectCategory.HasMaxMinZ())
            {
                <th>
                    Variation
                </th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Assets)
        {
            <tr>
                <td>
                    <a asp-action="Details" asp-controller="Assets" asp-route-id="@item.AssetID">
                        <img src="@Url.Action("Preview", "Assets", new { id = item.AssetID, size = 480 })" width="240" height="135" />
                    </a>
                </td>
                <td>
                    <a asp-action="Details" asp-controller="Assets" asp-route-id="@item.AssetID">
                        @Html.DisplayFor(modelItem => item.Asset.Name)
                    </a>
                    @if ((item.Asset.TerrainRegions & Model.TerrainRegion) != Model.TerrainRegion)
                    {
                        <br />
                        <span class="text-danger">Cet objet n'est pas prévu pour cette région !</span>
                    }
                </td>
                @if (Model.ObjectCategory.HasProbability())
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Probability)
                    </td>
                }
                @if (Model.ObjectCategory.HasPlacementRadius())
                {
                    <td>
                        @if (item.PlacementRadius != null)
                        {
                            <p>Emprise: rayon de @Html.DisplayFor(modelItem => item.PlacementRadius)&nbsp;m</p>
                        }
                        @if (item.ReservedRadius != null)
                        {
                            <p>Distance de la bordure: @Html.DisplayFor(modelItem => item.ReservedRadius)&nbsp;m</p>
                        }
                    </td>
                }
                @if (Model.ObjectCategory.IsBestFit())
                {
                    <th>
                        @Math.Round(item.Asset.Width, 1)&nbsp;x&nbsp;@Math.Round(item.Asset.Depth, 1)&nbsp;m
                    </th>
                }
                @if (Model.ObjectCategory.HasMaxMinZ())
                {
                    <td>
                        @if (item.MinZ != null || item.MaxZ != null)
                        {
                            <p>
                                Altitude de @Html.DisplayFor(modelItem => item.MinZ) à @Html.DisplayFor(modelItem => item.MaxZ)&nbsp;m
                            </p>
                        }
                    </td>
                }


                <td>
                    <a asp-controller="ObjectLibraryAssets" asp-action="Edit" asp-route-id="@item.ObjectLibraryAssetID">Modifier</a> |
                    <a asp-controller="ObjectLibraryAssets" asp-action="Delete" asp-route-id="@item.ObjectLibraryAssetID">Supprimer</a>
                </td>
            </tr>
        }
    </tbody>
</table>