@model ArmaRealMapWebSite.Entities.Assets.ObjectLibraryAsset
@using ArmaRealMap.Core.ObjectLibraries

@{
    ViewData["Title"] = "Edit";
    var regionAssets = (List<ArmaRealMapWebSite.Entities.Assets.Asset>)ViewBag.RegionAssets;
    var libraryAssets = (List<ArmaRealMapWebSite.Entities.Assets.Asset>)ViewBag.LibraryAssets;
}

<h1>Edit</h1>

<h4>ObjectLibraryAsset</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="ObjectLibraryAssetID" />
            <input type="hidden" asp-for="ObjectLibraryID" />
            <div class="form-group">
                <label asp-for="AssetID" class="control-label"></label>
                <select asp-for="AssetID" class="form-control">
                    @foreach (var group in regionAssets.GroupBy(r => r.AssetCategory).OrderBy(r => r.Key))
                    {
                        <optgroup label="@Html.DisplayFor(_ => group.Key)">
                            @foreach (var asset in group.OrderBy(r => r.Name))
                            {
                                <option value="@asset.AssetID">
                                    @asset.Name
                                    @if (libraryAssets.Contains(asset))
                                    {
                                        @: - ✅ Déjà utilisé
                                    }
                                </option>
                            }
                        </optgroup>
                    }
                </select>
                <span asp-validation-for="AssetID" class="text-danger"></span>
            </div>
            @if (Model.ObjectLibrary.ObjectCategory.HasProbability())
            {
                <div class="form-group">
                    <label asp-for="Probability" class="control-label"></label>
                    <input asp-for="Probability" class="form-control" />
                    <span asp-validation-for="Probability" class="text-danger"></span>
                </div>
            }
            @if (Model.ObjectLibrary.ObjectCategory.HasPlacementRadius())
            {
                <div class="form-group">
                    <label asp-for="PlacementRadius" class="control-label"></label>
                    <input asp-for="PlacementRadius" class="form-control" />
                    <span asp-validation-for="PlacementRadius" class="text-danger"></span>
                </div>
            }
            @if (Model.ObjectLibrary.ObjectCategory.HasReservedRadius())
            {
                <div class="form-group">
                    <label asp-for="ReservedRadius" class="control-label"></label>
                    <input asp-for="ReservedRadius" class="form-control" />
                    <span asp-validation-for="ReservedRadius" class="text-danger"></span>
                </div>
            }
            @if (Model.ObjectLibrary.ObjectCategory.HasMaxMinZ())
            {
                <div class="form-group">
                    <label asp-for="MaxZ" class="control-label"></label>
                    <input asp-for="MaxZ" class="form-control" />
                    <span asp-validation-for="MaxZ" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="MinZ" class="control-label"></label>
                    <input asp-for="MinZ" class="form-control" />
                    <span asp-validation-for="MinZ" class="text-danger"></span>
                </div>
            }
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
